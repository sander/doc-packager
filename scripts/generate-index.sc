#!/usr/bin/env -S scala-cli shebang

import java.io.FileWriter
import java.io.BufferedWriter
import java.nio.file.Path
import scala.io.Source
import scala.util.Using

val extension = "md"
val indexName = s"README.$extension"
val sectionStart = "<!-- Start autogenerated index -->"
val sectionEnd = "<!-- End autogenerated index -->"

def documents(paths: List[Path]): List[Path] =
  paths
    .filter(_.toString.endsWith(s".$extension"))
    .filter(_.toString != indexName)
    .sortBy(_.getFileName)
    .reverse

if (args.length != 1)
  println("Provide a directory name as argument.")
  sys.exit(1)

val directory = Path.of(args(0))
val paths = documents(
  directory.toFile.listFiles.toList
    .map(f => directory.relativize(f.toPath))
)
val readmePath = directory.resolve(indexName)
val readmeContent = Source.fromFile(readmePath.toFile).getLines.toList
val titleByDocument = for
  path <- paths
  title = Source
    .fromFile(directory.resolve(path).toFile)
    .getLines
    .next
    .dropWhile(c => c == '#' || c == ' ')
yield path -> title

val newContent =
  readmeContent.takeWhile(_ != sectionStart)
    ++ List(sectionStart)
    ++ titleByDocument.map((path, title) => s"- [$title](${path.getFileName})")
    ++ readmeContent.dropWhile(_ != sectionEnd)

Using(BufferedWriter(new FileWriter(readmePath.toFile))) { writer =>
  for (line <- newContent)
    writer.write(line)
    writer.write('\n')
}
